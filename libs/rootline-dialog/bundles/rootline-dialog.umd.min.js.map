{"version":3,"sources":["../../../projects/rootline-dialog/src/lib/rootline-dialog.config.ts","../../../projects/rootline-dialog/src/lib/rootline-dialog/rootline-dialog.component.html","../../../projects/rootline-dialog/src/lib/rootline-dialog/rootline-dialog.component.ts","../../../projects/rootline-dialog/src/lib/rootline-dialog.service.ts","../../../projects/rootline-dialog/src/lib/rootline-dialog.module.ts"],"names":["ROOTLINE_MODAL_CONFIG","InjectionToken","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵstyleProp","i0.ɵɵtextInterpolate","i0.ɵɵelement","i0.ɵɵproperty","i0.ɵɵlistener","i0.ɵɵtextInterpolate1","i0.ɵɵtemplate","RootlineDialogComponent","config","ref","this","modalConfig","typeColor","setModalColor","prototype","primaryButton","event","primaryEvent","close","secodaryButton","secondaryEvent","type","generalColor","successColor","warnColor","errorColor","i0","ɵɵdirectiveInject","MAT_DIALOG_DATA","i1","MatDialogRef","selectors","decls","vars","consts","template","rf","ctx","RootlineDialogService","dialog","token","Object","assign","default","verifyConfig","applyConfig","verfiedConfig","isLoader","modalWidth","openDialog","dialogConfig","open","width","disableClose","panelClass","data","openConfirmationModal","ɵɵinject","MatDialog","factory","ɵfac","DefaultComponentConfig","loaderText","color","RootlineDialogModule","forChild","ngModule","providers","provide","useValue","imports","CommonModule","MatDialogModule","FlexLayoutModule","MatButtonModule","MatIconModule","MatProgressSpinnerModule","declarations","exports"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\r\nimport { ThemePalette } from \"@angular/material/core\";\r\n\r\nexport interface ModalConfig {\r\n    warnColor: string;\r\n    successColor: string;\r\n    errorColor: string;\r\n    generalColor: string;\r\n    type: 'success' | 'warn' | 'error' | 'general';\r\n    matIcon: string;\r\n    localIcon: string;\r\n    headerText: string;\r\n    description: string;\r\n    primaryButtonName: string;\r\n    secondaryButtonName: string;\r\n    modalWidth: string;\r\n    disableClose: boolean;\r\n    isLoader: boolean;\r\n    loaderText: string;\r\n    panelClass: string | string[];\r\n    color: ThemePalette;\r\n    primaryEvent: (event) => any;\r\n    secondaryEvent: (event) => any;\r\n}\r\n\r\nexport const DefaultConfig: Partial<ModalConfig> = {\r\n    successColor: '#009900 ',\r\n    errorColor: '#ff0000 ',\r\n    warnColor: '#FFCC00 ',\r\n    generalColor: '#242424',\r\n    type: 'general',\r\n    modalWidth: 'auto',\r\n    disableClose: false,\r\n    isLoader: false,\r\n    loaderText: 'Loading ...',\r\n    color: 'primary',\r\n    primaryEvent: () => { },\r\n    secondaryEvent: () => { },\r\n};\r\n\r\nexport interface ModalToken {\r\n    default: ModalConfig;\r\n    config: Partial<ModalConfig>;\r\n}\r\n\r\nexport const ROOTLINE_MODAL_CONFIG = new InjectionToken<ModalToken>(\r\n    'ModalToken'\r\n);\r\n","<div fxLayout=\"column\" fxLayoutGap=\"30px\" *ngIf=\"!modalConfig.isLoader\">\n    <div fxLayout=\"column\" fxLayoutGap=\"20px\">\n        <div *ngIf=\"modalConfig.matIcon && !modalConfig.localIcon\" fxLayoutAlign=\"center center\" class=\"modal-icon\">\n            <mat-icon [style.color]=\"typeColor\">{{ modalConfig.matIcon }}</mat-icon>\n        </div>\n        <div *ngIf=\"modalConfig.localIcon\" class=\"modal-icon\" fxLayoutAlign=\"center center\">\n            <mat-icon [svgIcon]=\"modalConfig.localIcon\" [style.color]=\"typeColor\"></mat-icon>\n        </div>\n        <div fxLayout=\"column\" fxLayoutGap=\"15px\">\n            <div fxLayoutAlign=\"center center\" *ngIf=\"modalConfig.headerText\">\n                <span class=\"text-center modal-header\">{{\n                    modalConfig.headerText\n                    }}</span>\n            </div>\n            <div fxLayoutAlign=\"center center\" *ngIf=\"modalConfig.description\">\n                <span class=\"modal-description\">{{ modalConfig.description }}</span>\n            </div>\n        </div>\n    </div>\n    <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"20px\">\n        <button mat-stroked-button class=\"outline-secondary-button\" [color]=\"modalConfig.color\"\n            *ngIf=\"modalConfig.secondaryButtonName\" (click)=\"secodaryButton($event)\">\n            {{ modalConfig.secondaryButtonName }}\n        </button>\n        <button mat-raised-button [color]=\"modalConfig.color\" *ngIf=\"modalConfig.primaryButtonName\"\n            (click)=\"primaryButton($event)\">\n            {{ modalConfig.primaryButtonName }}\n        </button>\n    </div>\n</div>\n<div *ngIf=\"modalConfig.isLoader\" fxLayoutAlign=\"start center\" fxLayoutGap=\"30px\">\n    <div>\n        <mat-spinner diameter=\"40\" [color]=\"modalConfig.color\"></mat-spinner>\n    </div>\n    <div>\n        <span style=\"font-size: 16px\">{{ modalConfig.loaderText }}</span>\n    </div>\n</div>\n","import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ModalConfig } from '../rootline-dialog.config';\n\n@Component({\n  selector: 'rootline-dialog',\n  templateUrl: './rootline-dialog.component.html',\n  styleUrls: ['./rootline-dialog.component.scss']\n})\nexport class RootlineDialogComponent {\n  modalConfig: Partial<ModalConfig>;\n  typeColor: string;\n  constructor (\n    @Inject(MAT_DIALOG_DATA) config: Partial<ModalConfig>,\n    private ref: MatDialogRef<RootlineDialogComponent>\n  ) {\n    this.modalConfig = config;\n    this.typeColor = this.setModalColor(this.modalConfig);\n  }\n\n  primaryButton(event) {\n    this.modalConfig.primaryEvent(event);\n    this.ref.close();\n  }\n  secodaryButton(event) {\n    this.modalConfig.secondaryEvent(event);\n    this.ref.close();\n  }\n\n  private setModalColor(config: Partial<ModalConfig>) {\n    if (config.type == 'general') {\n      return config.generalColor;\n    } else if (config.type == 'success') {\n      return config.successColor;\n    } else if (config.type == 'warn') {\n      return config.warnColor;\n    } else if (config.type == 'error') {\n      return config.errorColor;\n    }\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { ROOTLINE_MODAL_CONFIG, ModalConfig, ModalToken } from './rootline-dialog.config';\nimport { RootlineDialogComponent } from './rootline-dialog/rootline-dialog.component';\n\n@Injectable()\nexport class RootlineDialogService {\n  modalConfig: Partial<ModalConfig>;\n  constructor (\n    private dialog: MatDialog,\n    @Inject(ROOTLINE_MODAL_CONFIG) token: ModalToken\n  ) {\n    this.modalConfig = {\n      ...token.default,\n      ...token.config,\n    };\n    this.modalConfig = this.verifyConfig(this.modalConfig);\n  }\n\n  private applyConfig(config: Partial<ModalConfig>): Partial<ModalConfig> {\n    config = this.verifyConfig(config);\n\n    return { ...this.modalConfig, ...config };\n  }\n\n  private verifyConfig(config: Partial<ModalConfig>): Partial<ModalConfig> {\n    let verfiedConfig: Partial<ModalConfig> = { ...config };\n    if (config.isLoader) {\n      verfiedConfig.modalWidth = 'auto';\n    }\n    return verfiedConfig;\n  }\n\n  private openDialog(config: Partial<ModalConfig> = {}) {\n    let dialogConfig = this.applyConfig(config);\n\n    return this.dialog.open(RootlineDialogComponent, {\n      width: dialogConfig.modalWidth,\n      disableClose: dialogConfig.disableClose,\n      panelClass: dialogConfig.panelClass,\n      data: dialogConfig,\n    });\n  }\n\n  openConfirmationModal(\n    config: Partial<ModalConfig> = {}\n  ): MatDialogRef<RootlineDialogComponent> {\n    return this.openDialog(config);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatDialogModule } from \"@angular/material/dialog\";\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ModuleWithProviders } from '@angular/core';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { RootlineDialogComponent } from './rootline-dialog/rootline-dialog.component';\nimport { DefaultConfig, ModalConfig, ROOTLINE_MODAL_CONFIG } from './rootline-dialog.config';\nimport { RootlineDialogService } from './rootline-dialog.service';\n\nexport const DefaultComponentConfig: Partial<ModalConfig> = {\n  ...DefaultConfig,\n};\n\n@NgModule({\n  declarations: [RootlineDialogComponent],\n  imports: [\n    CommonModule,\n    MatDialogModule,\n    FlexLayoutModule,\n    MatButtonModule,\n    MatIconModule,\n    MatProgressSpinnerModule\n  ],\n  providers: [RootlineDialogService],\n  exports: [RootlineDialogComponent]\n})\nexport class RootlineDialogModule {\n  static forChild(config: Partial<ModalConfig> = {}): ModuleWithProviders<RootlineDialogModule> {\n    return {\n      ngModule: RootlineDialogModule,\n      providers: [\n        {\n          provide: ROOTLINE_MODAL_CONFIG,\n          useValue: {\n            default: DefaultComponentConfig,\n            config,\n          },\n        },\n      ],\n    };\n  }\n}\n"]}