{"version":3,"file":"rootline-dialog.umd.js","sources":["../../../projects/rootline-dialog/src/lib/rootline-dialog.config.ts","../../../projects/rootline-dialog/src/lib/rootline-dialog/rootline-dialog.component.html","../../../projects/rootline-dialog/src/lib/rootline-dialog/rootline-dialog.component.ts","../../../projects/rootline-dialog/src/lib/rootline-dialog.service.ts","../../../projects/rootline-dialog/src/lib/rootline-dialog.module.ts","../../../projects/rootline-dialog/src/public-api.ts","../../../projects/rootline-dialog/src/rootline-dialog.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\nimport { ThemePalette } from \"@angular/material/core\";\r\n\r\nexport interface ModalConfig {\r\n    warnColor: string;\r\n    successColor: string;\r\n    errorColor: string;\r\n    generalColor: string;\r\n    type: 'success' | 'warn' | 'error' | 'general';\r\n    matIcon: string;\r\n    localIcon: string;\r\n    headerText: string;\r\n    description: string;\r\n    primaryButtonName: string;\r\n    secondaryButtonName: string;\r\n    modalWidth: string;\r\n    disableClose: boolean;\r\n    isLoader: boolean;\r\n    loaderText: string;\r\n    panelClass: string | string[];\r\n    color: ThemePalette;\r\n    primaryEvent: (event) => any;\r\n    secondaryEvent: (event) => any;\r\n}\r\n\r\nexport const DefaultConfig: Partial<ModalConfig> = {\r\n    successColor: '#009900 ',\r\n    errorColor: '#ff0000 ',\r\n    warnColor: '#FFCC00 ',\r\n    generalColor: '#242424',\r\n    type: 'general',\r\n    modalWidth: 'auto',\r\n    disableClose: false,\r\n    isLoader: false,\r\n    loaderText: 'Loading ...',\r\n    color: 'primary',\r\n    primaryEvent: () => { },\r\n    secondaryEvent: () => { },\r\n};\r\n\r\nexport interface ModalToken {\r\n    default: ModalConfig;\r\n    config: Partial<ModalConfig>;\r\n}\r\n\r\nexport const ROOTLINE_MODAL_CONFIG = new InjectionToken<ModalToken>(\r\n    'ModalToken'\r\n);\r\n","<div fxLayout=\"column\" fxLayoutGap=\"30px\" *ngIf=\"!modalConfig.isLoader\">\n    <div fxLayout=\"column\" fxLayoutGap=\"20px\">\n        <div *ngIf=\"modalConfig.matIcon && !modalConfig.localIcon\" fxLayoutAlign=\"center center\" class=\"modal-icon\">\n            <mat-icon [style.color]=\"typeColor\">{{ modalConfig.matIcon }}</mat-icon>\n        </div>\n        <div *ngIf=\"modalConfig.localIcon\" class=\"modal-icon\" fxLayoutAlign=\"center center\">\n            <mat-icon [svgIcon]=\"modalConfig.localIcon\" [style.color]=\"typeColor\"></mat-icon>\n        </div>\n        <div fxLayout=\"column\" fxLayoutGap=\"15px\">\n            <div fxLayoutAlign=\"center center\" *ngIf=\"modalConfig.headerText\">\n                <span class=\"text-center modal-header\">{{\n                    modalConfig.headerText\n                    }}</span>\n            </div>\n            <div fxLayoutAlign=\"center center\" *ngIf=\"modalConfig.description\">\n                <span class=\"modal-description\">{{ modalConfig.description }}</span>\n            </div>\n        </div>\n    </div>\n    <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"20px\">\n        <button mat-stroked-button class=\"outline-secondary-button\" [color]=\"modalConfig.color\"\n            *ngIf=\"modalConfig.secondaryButtonName\" (click)=\"secodaryButton($event)\">\n            {{ modalConfig.secondaryButtonName }}\n        </button>\n        <button mat-raised-button [color]=\"modalConfig.color\" *ngIf=\"modalConfig.primaryButtonName\"\n            (click)=\"primaryButton($event)\">\n            {{ modalConfig.primaryButtonName }}\n        </button>\n    </div>\n</div>\n<div *ngIf=\"modalConfig.isLoader\" fxLayoutAlign=\"start center\" fxLayoutGap=\"30px\">\n    <div>\n        <mat-spinner diameter=\"40\" [color]=\"modalConfig.color\"></mat-spinner>\n    </div>\n    <div>\n        <span style=\"font-size: 16px\">{{ modalConfig.loaderText }}</span>\n    </div>\n</div>\n","import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ModalConfig } from '../rootline-dialog.config';\n\n@Component({\n  selector: 'rootline-dialog',\n  templateUrl: './rootline-dialog.component.html',\n  styleUrls: ['./rootline-dialog.component.scss']\n})\nexport class RootlineDialogComponent {\n  modalConfig: Partial<ModalConfig>;\n  typeColor: string;\n  constructor (\n    @Inject(MAT_DIALOG_DATA) config: Partial<ModalConfig>,\n    private ref: MatDialogRef<RootlineDialogComponent>\n  ) {\n    this.modalConfig = config;\n    this.typeColor = this.setModalColor(this.modalConfig);\n  }\n\n  primaryButton(event) {\n    this.modalConfig.primaryEvent(event);\n    this.ref.close();\n  }\n  secodaryButton(event) {\n    this.modalConfig.secondaryEvent(event);\n    this.ref.close();\n  }\n\n  private setModalColor(config: Partial<ModalConfig>) {\n    if (config.type == 'general') {\n      return config.generalColor;\n    } else if (config.type == 'success') {\n      return config.successColor;\n    } else if (config.type == 'warn') {\n      return config.warnColor;\n    } else if (config.type == 'error') {\n      return config.errorColor;\n    }\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { ROOTLINE_MODAL_CONFIG, ModalConfig, ModalToken } from './rootline-dialog.config';\nimport { RootlineDialogComponent } from './rootline-dialog/rootline-dialog.component';\n\n@Injectable()\nexport class RootlineDialogService {\n  modalConfig: Partial<ModalConfig>;\n  constructor (\n    private dialog: MatDialog,\n    @Inject(ROOTLINE_MODAL_CONFIG) token: ModalToken\n  ) {\n    this.modalConfig = {\n      ...token.default,\n      ...token.config,\n    };\n    this.modalConfig = this.verifyConfig(this.modalConfig);\n  }\n\n  private applyConfig(config: Partial<ModalConfig>): Partial<ModalConfig> {\n    config = this.verifyConfig(config);\n\n    return { ...this.modalConfig, ...config };\n  }\n\n  private verifyConfig(config: Partial<ModalConfig>): Partial<ModalConfig> {\n    let verfiedConfig: Partial<ModalConfig> = { ...config };\n    if (config.isLoader) {\n      verfiedConfig.modalWidth = 'auto';\n    }\n    return verfiedConfig;\n  }\n\n  private openDialog(config: Partial<ModalConfig> = {}) {\n    let dialogConfig = this.applyConfig(config);\n\n    return this.dialog.open(RootlineDialogComponent, {\n      width: dialogConfig.modalWidth,\n      disableClose: dialogConfig.disableClose,\n      panelClass: dialogConfig.panelClass,\n      data: dialogConfig,\n    });\n  }\n\n  openConfirmationModal(\n    config: Partial<ModalConfig> = {}\n  ): MatDialogRef<RootlineDialogComponent> {\n    return this.openDialog(config);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatDialogModule } from \"@angular/material/dialog\";\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ModuleWithProviders } from '@angular/core';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { RootlineDialogComponent } from './rootline-dialog/rootline-dialog.component';\nimport { DefaultConfig, ModalConfig, ROOTLINE_MODAL_CONFIG } from './rootline-dialog.config';\nimport { RootlineDialogService } from './rootline-dialog.service';\n\nexport const DefaultComponentConfig: Partial<ModalConfig> = {\n  ...DefaultConfig,\n};\n\n@NgModule({\n  declarations: [RootlineDialogComponent],\n  imports: [\n    CommonModule,\n    MatDialogModule,\n    FlexLayoutModule,\n    MatButtonModule,\n    MatIconModule,\n    MatProgressSpinnerModule\n  ],\n  providers: [RootlineDialogService],\n  exports: [RootlineDialogComponent]\n})\nexport class RootlineDialogModule {\n  static forChild(config: Partial<ModalConfig> = {}): ModuleWithProviders<RootlineDialogModule> {\n    return {\n      ngModule: RootlineDialogModule,\n      providers: [\n        {\n          provide: ROOTLINE_MODAL_CONFIG,\n          useValue: {\n            default: DefaultComponentConfig,\n            config,\n          },\n        },\n      ],\n    };\n  }\n}\n","/*\n * Public API Surface of rootline-dialog\n */\n\nexport * from './lib/rootline-dialog.service';\nexport * from './lib/rootline-dialog/rootline-dialog.component';\nexport * from './lib/rootline-dialog.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["InjectionToken","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵstyleProp","i0.ɵɵtextInterpolate","i0.ɵɵelement","i0.ɵɵproperty","i0.ɵɵlistener","i0.ɵɵtextInterpolate1","i0.ɵɵtemplate","MAT_DIALOG_DATA","Component","Inject","Injectable","CommonModule","MatDialogModule","FlexLayoutModule","MatButtonModule","MatIconModule","MatProgressSpinnerModule","NgModule"],"mappings":"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"}